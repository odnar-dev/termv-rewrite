#!/usr/bin/env bash
readonly BASH_BINARY="$(which bash)"
readonly TERMV_SCRIPT_NAME="$(basename "$0")"
readonly TERMV_VERSION=2.0
readonly CURRNT_TIME="$(date '+%Y-%m-%d')"
TERMV_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/termv"
TERMV_CONFIG_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/termv"

TERMV_DEPS=(curl fzf)

TERMV_AUTO_UPDATE=${TERMV_AUTO_UPDATE:-true}
TERMV_AUTO_UPDATE_FREQ="${TERMV_AUTO_UPDATE_FREQ:-daily}"
TERMV_FORCE_UPDATE=${TERMV_FORCE_UPDATE:-false}

TERMV_LOG=${TERMV_LOG:-false}
TERMV_PLAY_BG=${TERMV_PLAY_BG:-"alt-enter"}
TERMV_RM_EMOJI=${TERMV_RM_EMOJI:-false}
TERMV_isINSTALLED=${TERMV_isINSTALLED:-true}

PLAYLIST_COUNT=0
declare -A PLAYLIST_NAME
declare -A PLAYLIST_SOURCE
declare -A PLAYLIST_TYPE
#declare -A CHANNELS_LIST
# general fucntion
has() {
	case "$(command -v "$1" 2>/dev/null)" in alias*|"") return 1 ; esac
}

need(){
	local prog ; local dependencies_not_installed ;
	for prog in $@; do ! has "$prog" && dependencies_not_installed="${dependencies_not_installed}${prog}, " ; done
	[ -n "${dependencies_not_installed}" ] && { echo "err : missing dependencies, please install: ${dependencies_not_installed%??}."; return 1 ;}
	return 0
}

prnt_log() {
	[[ "${TERMV_LOG:-false}" == false ]] && return 0
	echo "$@"
}

prnt_err(){
	echo "err : $@"
}

is_file_not_uptodate(){
	[ "${TERMV_FORCE_UPDATE}" == true ] && return 0
	[ -s "$*" ] || return 0
	[ "$(stat -c %y "$*" 2>/dev/null | cut -d' ' -f1)" = "${CURRNT_TIME:?}" ] && return 1
	return 0
}
# termv fucntion
add_src(){
	PLAYLIST_COUNT=$((PLAYLIST_COUNT+1)); PLAYLIST_NAME[$PLAYLIST_COUNT]="${1:?}"; PLAYLIST_SOURCE[$PLAYLIST_COUNT]="${2:?}"; PLAYLIST_TYPE[$PLAYLIST_COUNT]="${3:?}"
}

check_deps(){
	need ${TERMV_DEPS[@]} || exit 1
}

load_configs(){
	if [ -f "${TERMV_CONFIG_DIR}/config" ] ; then
		. "${TERMV_CONFIG_DIR}/config"
		prnt_log "log : loading config file from \`${TERMV_CONFIG_DIR}/config\`"
	else
		prnt_log "wrn : you don't have a config file; using the default settings"
	fi
}

update_playlists(){
	for (( i=1; i<="${PLAYLIST_COUNT:-1}"; ++i)); do
		update_playlist "${PLAYLIST_NAME[$i]}" "${PLAYLIST_SOURCE[$i]}" "${PLAYLIST_TYPE[$i]}"
	done
}

update_playlist(){
	if is_file_not_uptodate "${TERMV_CACHE_DIR:?}/termvs/${1:?}.termv" ; then
		if is_file_not_uptodate "${TERMV_CACHE_DIR:?}/playlists/${1:?}" ; then
			download_file "$1" "$2"
			case "$?" in
				0) ;;
				1) return 1;;
				2) return 0;;
			esac
		fi
		parse_playlist "$1" "$3" || return 1
		echo "${CURRNT_TIME}" > "${TERMV_CACHE_DIR:?}/last_update"
	fi
}

download_file(){
	mkdir -p "${TERMV_CACHE_DIR:?}/etags" "${TERMV_CACHE_DIR:?}/temps" "${TERMV_CACHE_DIR:?}/playlists"
	local old_etag new_etag
	local filename=$1; local URL=$2
	local filePath="${TERMV_CACHE_DIR:?}/playlists/${filename}"
	local etagPath="${TERMV_CACHE_DIR:?}/etags/${filename}.etag"
	local tmp_filePath="${TERMV_CACHE_DIR:?}/temps/${filename}.tmp"

	printf '%s' "- Downloading ${filename:?}... "

	[ -f "${etagPath:?}" ] && old_etag=$(<"${etagPath}") || old_etag="null"
	[ -s "${filePath:?}" ] || { rm -fr "${etagPath:?}";old_etag="null"; }
	curl -s "${URL}" --etag-compare "${etagPath:?}" --etag-save "${etagPath:?}" -o "${tmp_filePath:?}" \
		 -H "accept-encoding:gzip" --compressed && downloaded=true || downloaded=false

	new_etag=$(<"${etagPath}")

	if [ "${downloaded}" ] && [ "${new_etag}" = "${old_etag}" ]; then
		touch "${filePath:?}" ;
		printf '\033[33;1m %s \033[0m\n' "Already up to date." ;
		return 2
	elif [ "${downloaded}" ]; then
		mv -f "${tmp_filePath:?}" "${filePath:?}"
		printf '\033[32;1m %s \033[0m\n' "Done!" ;
		return 0
	else
		rm -f "${etagPath:?}" "${tmp_filePath:?}"
		echo "${oldetag}" > "${etagPath}"
		printf '\033[31;1m %s \033[0m\n' "Uh oh, failed!"
		return 1
	fi
}

parse_playlist(){
	mkdir -p "${TERMV_CACHE_DIR:?}/termvs"
	local parsed=false
	if has parse_playlist_"${2:?}"; then
		[ -f "${TERMV_CACHE_DIR:?}/playlists/${1:?}" ] || { prnt_err "${TERMV_CACHE_DIR:?}/playlists/${1:?} not found!" ;return 1 ;}
		printf '%s' "- Parsing ${1:?}... "
		parse_playlist_"${2}" "$1" && parsed=true
		if [ "${parsed:?}" == true ]; then
			printf '\033[32;1m %s \033[0m\n' "Done!" ;
			return 0
		else
			printf '\033[31;1m %s \033[0m\n' "Uh oh, failed!"
			return 1
		fi
	else
		prnt_err "parse_playlist_${2}() function can't be found, playlist type \`${2}\` is not supported yet!"
		return 1
	fi
}

load_playlists(){
	CHANNELS_LIST=$(cat $(printf "${TERMV_CACHE_DIR:?}/termvs/%s.termv " "${PLAYLIST_NAME[@]}") | santize_this_shit | align_this_nuts )
}

santize_this_shit(){
	if [[ "${TERMV_RM_EMOJI:-false}" == true ]] ; then
		TERMV_EMOJIS_LIST="\U1f300-\U1f5ff\U1f900-\U1f9ff\U1f600-\U1f64f\U1f680-\U1f6ff\U2600-\U26ff\U2700-\U27bf\U1f1e6-\U1f1ff\U1f191-\U1f251\U1f004\U1f0cf\U1f170-\U1f171\U1f17e-\U1f17f\U1f18e\U3030\U2b50\U2b55\U2934-\U2935\U2b05-\U2b07\U2b1b-\U2b1c\U3297\U3299\U303d\U00a9\U00ae\U2122\U23f3\U24c2\U23e9-\U23ef\U25b6\U23f8-\U23fa"
	fi
	TERMV_EMOJIS_LIST+="\|"
	LC_ALL=UTF-8 sed -e "s/[$(printf ${TERMV_EMOJIS_LIST})]//g"
}

align_this_nuts(){
	gawk -v max="${COLUMNS:-80}" 'BEGIN { RS="\n"; FS=" \t " }
		NF {
			name = substr(gensub(/[0-9]+\.\s*(.*)/, "\\1", "g", $1),0,max/4)
			category = substr(gensub(/\s+> (.*)/, "\\1", "g", $2),0,max/8)
			languages = substr(gensub(/\s+> (.*)/, "\\1", "g", $3),0,max/3)
			countries = substr(gensub(/\s+> (.*)/, "\\1", "g", $4),0,70)
			channelUrl = substr(gensub(/\s+> (.*)/, "\\1", "g", $5),0)
			print name "\t|" category "\t|" languages "\t|" countries "\t" channelUrl
		}' | \
	column -t -s $'\t' #| \
	#awk '!a[$0]++'
}

if ! has "${TERMV_SCRIPT_NAME:-termv}" ;then
	prnt_log "wrn : ${TERMV_SCRIPT_NAME:-termv} in not intalled in your path file"
	TERMV_isINSTALLED=false
	TERMV_CONFIG_DIR="$PWD/config"
	TERMV_CACHE_DIR="$PWD/cache"
fi

load_configs

prnt_log "log is on"

check_deps

mkdir -p "${TERMV_CACHE_DIR:?}"

update_playlists

load_playlists

#SHELL="${BASH_BINARY}" \
fzf -e -i --reverse --cycle --with-nth="1..-2"\
	--bind "${TERMV_PLAY_BG:?}:execute-silent(echo {})"\
	--bind "ctrl-c:execute-silent(echo {})"\
	--bind "enter:execute(echo {})"\
	--bind "double-click:execute(echo {})"\
	--header="Select channel (press Escape to exit)" -q "${*:-}" \
			< <( printf '%s\n' "${CHANNELS_LIST:-}" ) #)
